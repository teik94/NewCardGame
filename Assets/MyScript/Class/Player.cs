//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class Player : MonoBehaviour
{
    public string PlayerName = "";
    public string IpAdress = "";
    public bool Status = true;
    public GameObject CharacterObject1;
    public GameObject CharacterObject2;
    public Character Character1;
    public Character Character2;
    public Guid PlayerID;
    public int HandLimit = 0;
    public int CurrentHealth = 0;
    public double MaxHealth = 0;
    public int AttackingRange = 0;
    public int MinusDistance = 0;
    public int PlusDistance = 0;
    private PlayerTurn turn = PlayerTurn.OutTurn;
    public bool AutoAI = false;

    public bool DodgeAble = true;
    public bool IsDodge = false;
    public bool IsRespond = false;
    public int AdditionDodge = 1;
    //public int AdditionAttack = 0;
    public bool MainAttack = false;
    public bool CommandSeal = false;
    public int DamageIncrease = 0;
    public int DamageDecrease = 0;
    public bool DoubleDamage = false;
    public int DamageTaken = 0;
    public bool Attacked = false;
    public bool Rage = false;

    public GameObject Weapon, Armor, PlusVehicle, MinusVehicle;
    //public CardForm myWeapon = null, myArmor = null, myPlusVehicle = null, myMinusvehicle = null;
    public GameObject Delay1, Delay2, Delay3, Delay4;
    public CardForm myDelay1 = null, myDelay2 = null, myDelay3 = null, myDelay4 = null;
    Text health, maxHealth, hand;

    public CardForm lastDamageCard = null;
    public Player lastDamagePlayer;
    public Player targetPlayer;
    public Game game;

    public delegate IEnumerator PhaseDelegate();
    public PhaseDelegate ChangePhase = null;
    public PhaseDelegate BeginningOfTurn = null;
    public PhaseDelegate DrawPhase = null;
    public PhaseDelegate JudgmentPhase = null;
    public PhaseDelegate ActionPhase = null;
    public PhaseDelegate DiscardPhase = null;
    public PhaseDelegate EndPhase = null;
    public PhaseDelegate OnWaitingAction = null;

    public delegate IEnumerator EffectDelegate(int number, Player source, Player victim);
    public EffectDelegate BeforeAttack = null;
    public EffectDelegate BeforeAttacked = null;
    public EffectDelegate Healing = null;
    public EffectDelegate AfterHealing = null;
    public EffectDelegate BrinkOfDeath = null;
    public EffectDelegate EndAttack = null;
    public EffectDelegate HealModifier = null;


    public delegate IEnumerator DamageDelegate(int number, Player source, Player victim, Game.DamageType dmgType);
    public DamageDelegate AttackDamageModifier = null;
    public DamageDelegate DamageModifier = null;
    public DamageDelegate BeforeDamageCalculation = null;
    public DamageDelegate DamageCalculation = null;
    public DamageDelegate TakeDamage = null;
    public DamageDelegate CauseDamage = null;
    public DamageDelegate Duel = null;
    public DamageDelegate Respond = null;

    public delegate IEnumerator SequentiallyDelegate();
    public SequentiallyDelegate OnJudgment = null;
    public SequentiallyDelegate BeforeJudgmentTakeEffect = null;
    public SequentiallyDelegate AfterJudgmentTakeEffect = null;
    public SequentiallyDelegate Discard = null;


    public enum ActionState
    {
        None, Free, WaitingDodgeFromAttack, WaitingDodge, WaitingTool, WaitingRhoAias, WaitingBoD, WaitingSave, WaitingDiscard,
        UseAs, WaitingAttack, WaitingAttackDuel, OnDuel,
    }

    public enum PlayerTurn
    {
        Beginning = 0,
        Judgment = 1,
        Draw = 2,
        Action = 3,
        Discard = 4,
        End = 5,
        OutTurn = 6,
    }

    public ActionState actionState = ActionState.None;

    public PlayerTurn Turn
    {
        get { return turn; }
        set
        {
            turn = value;
            if (turn == PlayerTurn.Beginning)
            {
                if (BeginningOfTurn != null) StartCoroutine(BeginningOfTurn());
            }
            else if (turn == PlayerTurn.Judgment)
            {
                if (JudgmentPhase != null) StartCoroutine(JudgmentPhase());
            }
            else if (turn == PlayerTurn.Draw)
            {
                if (DrawPhase != null) StartCoroutine(DrawPhase());
            }
            else if (turn == PlayerTurn.Action)
            {
                if (ActionPhase != null) StartCoroutine(ActionPhase());
                this.actionState = ActionState.Free;
            }
            else if (turn == PlayerTurn.Discard)
            {
                if (DiscardPhase != null) StartCoroutine(DiscardPhase());
                this.actionState = ActionState.None;
            }
            else if (turn == PlayerTurn.End)
            {
                if (EndPhase != null) StartCoroutine(EndPhase());
            }
            else if (turn == PlayerTurn.OutTurn)
            {
                //MainAttack = false;
            }
            //if (turn != PlayerTurn.Action && turn != PlayerTurn.OutTurn)
            //{
            //    System.Threading.Timer time = new System.Threading.Timer(delegate(object sender)
            //    {
            //        if (ChangePhase != null) OnWaitingAction += ChangePhase;
            //    });
            //    time.Change(500, 0);
            //}
        }
    }

    #region Method
    public string GetPhase()
    {
        if (turn == PlayerTurn.Beginning) return "Beginning of Turn";
        if (turn == PlayerTurn.Judgment) return "Judgment Phase";
        if (turn == PlayerTurn.Draw) return "Draw Phase";
        if (turn == PlayerTurn.Action) return "Action Phase";
        if (turn == PlayerTurn.Discard) return "Discard Phase";
        if (turn == PlayerTurn.End) return "End Phase";

        return "End Turn";
    }
    public CardForm GetWeapon()
    {
        Equipment weapon = null;
        if (this.Weapon != null) weapon = this.Weapon.GetComponent<Equipment>();
        if (weapon != null && weapon.Form != null && weapon.Form.Form.Owner != this) weapon.Form = null;
        if (weapon != null && weapon.Form != null) return weapon.Form;
        else return null;
    }
    public CardForm GetArmor()
    {
        Equipment armor = null;
        if (this.Armor != null) armor = this.Armor.GetComponent<Equipment>();
        if (armor != null && armor.Form != null && armor.Form.Form.Owner != this) armor.Form = null;
        if (armor != null && armor.Form != null) return armor.Form;
        else return null;
    }
    public CardForm GetPlusVehicle()
    {
        Equipment plus = null;
        if (this.PlusVehicle != null) plus = this.PlusVehicle.GetComponent<Equipment>();
        if (plus != null && plus.Form != null && plus.Form.Form.Owner != this) plus.Form = null;
        if (plus != null && plus.Form != null) return plus.Form;
        else return null;
    }
    public CardForm GetMinusVehicle()
    {
        Equipment minus = null;
        if (this.MinusVehicle != null) minus = this.MinusVehicle.GetComponent<Equipment>();
        if (minus != null && minus.Form != null && minus.Form.Form.Owner != this) minus.Form = null;
        if (minus != null && minus.Form != null) return minus.Form;
        else return null;
    }
    public List<CardForm> GetOwnCard()
    {
        List<CardForm> list = new List<CardForm>();
        foreach (CardForm cf in game.CardList)
        {
            if(cf.Form.Owner == this)
            {
                list.Add(cf);
            }
        }
        return list;
    }
    public void DiscardEquipment(CardForm cf)
    {
        Equipment weapon = null, armor = null, plus = null, minus = null;
        if (this.Weapon != null) weapon = this.Weapon.GetComponent<Equipment>();
        if (this.Armor != null) armor = this.Armor.GetComponent<Equipment>();
        if (this.PlusVehicle != null) plus = this.PlusVehicle.GetComponent<Equipment>();
        if (this.MinusVehicle != null) minus = this.MinusVehicle.GetComponent<Equipment>();
        if (weapon != null && weapon.Form != null && weapon.Form == cf)
        {
            weapon.Form = null;
            this.Weapon.SetActive(false);
        }
        if (armor != null && armor.Form != null && armor.Form == cf)
        {
            armor.Form = null;
            this.Armor.SetActive(false);
        }
        if (plus != null && plus.Form != null && plus.Form == cf)
        {
            plus.Form = null;
            this.PlusVehicle.SetActive(false);
        }
        if (minus != null && minus.Form != null && minus.Form == cf)
        {
            minus.Form = null;
            this.MinusVehicle.SetActive(false);
        }
    }
    #endregion

    #region Event Handler
    private IEnumerator beginingOfTurn()
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();

        this.Rage = false;
        this.MainAttack = false;
        this.DodgeAble = true;
        this.IsDodge = false;
        this.IsRespond = false;
        this.AdditionDodge = 1;
        this.MainAttack = false;
        this.CommandSeal = false;
        this.DamageIncrease = 0;
        this.DamageDecrease = 0;
        this.DoubleDamage = false;
        this.DamageTaken = 0;
        this.Attacked = false;

        if (Character1 != null && Character1.BeginningOfTurn != null) { game.busy[free] = true; StartCoroutine(Character1.BeginningOfTurn(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null && Character2.BeginningOfTurn != null) { game.busy[free] = true; StartCoroutine(Character2.BeginningOfTurn(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.BeginningOfTurn, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.BeginningOfTurn, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
        game.ChangePhase();
    }

    private IEnumerator judgmentPhase()
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();

        if (Character1 != null && Character1.JudgementPhase != null) { game.busy[free] = true; StartCoroutine(Character1.JudgementPhase(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null && Character2.JudgementPhase != null) { game.busy[free] = true; StartCoroutine(Character2.JudgementPhase(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.JudgmentPhase, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.JudgmentPhase, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
        game.ChangePhase();
    }

    private IEnumerator drawPhase()
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();

        if (Character1 != null && Character1.DrawPhase != null) { game.busy[free] = true; StartCoroutine(Character1.DrawPhase(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null && Character2.DrawPhase != null) { game.busy[free] = true; StartCoroutine(Character2.DrawPhase(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.DrawPhase, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.DrawPhase, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        game.DrawCard();

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
        game.ChangePhase();
    }

    private IEnumerator discardPhase()
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();

        if (Character1 != null && Character1.DiscardPhase != null) { game.busy[free] = true; StartCoroutine(Character1.DiscardPhase(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null && Character2.DiscardPhase != null) { game.busy[free] = true; StartCoroutine(Character2.DiscardPhase(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.DiscardPhase, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.DiscardPhase, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
        game.ChangePhase();
    }

    private IEnumerator endPhase()
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();

        if (Character1 != null && Character1.EndTurn != null) { game.busy[free] = true; StartCoroutine(Character1.EndTurn(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null && Character2.EndTurn != null) { game.busy[free] = true; StartCoroutine(Character2.EndTurn(0,this, this)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.EndTurn, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.EndTurn, 0, this, this, Game.DamageType.LossHealth)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
        game.ChangePhase();
    }

    private IEnumerator afterHealing(int number, Player source, Player victim)
    {
        int busy = game.GetBusyTask();
        //int free = game.GetFreeTask();

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
    }

    private IEnumerator brinkOfDeath(int number, Player source, Player victim)
    {
        int busy = game.GetBusyTask();
        //int free = game.GetFreeTask();
        actionState = ActionState.WaitingBoD;

        //do something

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator attackDamageModifier(int number, Player source, Player victim, Game.DamageType dmgType)
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();
        Debug.Log(free);
        if (CommandSeal)
        {
            source.DamageIncrease += 1;
            CommandSeal = false;
        }
        CardForm weapon = GetWeapon();
        if (weapon != null && weapon.DamageIncrease != null) { game.busy[free] = true; StartCoroutine(weapon.DamageIncrease(number, source, victim, dmgType)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.AttackDamageModifier, number, source, victim, dmgType)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.AttackDamageModifier, number, source, victim, dmgType)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator damageModifier(int number, Player source, Player victim, Game.DamageType dmgType)
    {
        int busy = game.GetBusyTask();
        //int free = game.GetFreeTask();

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator healing(int number, Player source, Player victim)
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();
        if (HealModifier != null) { game.busy[free] = true; StartCoroutine(HealModifier(number, source, victim)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        if (victim.CurrentHealth < victim.MaxHealth)
        {
            victim.CurrentHealth += number;
            if (AfterHealing != null) { game.busy[free] = true; StartCoroutine(AfterHealing(number, source, victim)); }
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        }
        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
    }

    private IEnumerator beforeAttack(int number, Player source, Player victim)
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();
        actionState = ActionState.None;
        targetPlayer = victim;
        source.MainAttack = true;

        CardForm weapon = GetWeapon();
        if (weapon != null && weapon.BeforeAttack != null) { game.busy[free] = true; StartCoroutine(weapon.BeforeAttack(number, source, victim)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.Attacking, number, source, victim, Game.DamageType.Physical)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.Attacking, number, source, victim, Game.DamageType.Physical)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator beforeAttacked(int number, Player source, Player victim)
    {
        int busy = game.GetBusyTask();
        IsDodge = false;
        //game.Busy = true;
        //actionState = ActionState.WaitingDodge;
        targetPlayer = source;
        victim.actionState = ActionState.WaitingDodgeFromAttack;
        if (source.DodgeAble)
        {
            if (!victim.AutoAI)
            {
                if (victim == game.myPlayer)
                {
                    game.btnCancel.SetActive(true);
                    game.CancelClick += delegate()
                    {
                        IsDodge = false;
                        game.btnCancel.SetActive(false);
                        game.CancelClick = null;
                        game.busy[busy] = false;
                        victim.actionState = ActionState.None;
                    };
                    while (victim.actionState == ActionState.WaitingDodgeFromAttack) yield return new WaitForSeconds(0.1f);
                }
            }
            else
            {
                List<CardForm> hand = game.CardList.GetHandList(this);
                int dodgeCount = 0;
                int dodgeNeed = AdditionDodge + 1;
                foreach (CardForm cf in hand)
                {
                    if (cf is Dodge)
                    { dodgeCount++; }
                }
                if (dodgeCount >= (AdditionDodge + 1))
                {
                    for (int i = 0; i < hand.Count; i++)
                    {
                        if (hand[i] is Dodge)
                        {
                            Dodge dodgeCard = hand[i] as Dodge;
                            dodgeCard.UseCard();
                            dodgeNeed--;
                            if (dodgeNeed <= 0)
                            {
                                IsDodge = true;
                                break;
                            }
                        }
                    }
                }
                else
                {
                    IsDodge = false;
                }
            }
        }
        if (victim.actionState == ActionState.WaitingDodgeFromAttack) victim.actionState = ActionState.None;
        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
    }

    private IEnumerator beforeDamageCalculation(int number, Player source, Player victim, Game.DamageType dmgType)
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();

        CardForm armor = GetArmor();
        if (armor != null && armor.DamageDecrease != null) { game.busy[free] = true; StartCoroutine(armor.DamageDecrease(number, source, victim, dmgType)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.DecreaseDamage, number, source, victim, dmgType)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.DecreaseDamage, number, source, victim, dmgType)); }
        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator damageCalculation(int number, Player source, Player victim, Game.DamageType dmgType)
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();
        if (victim.DamageDecrease >= (number + source.DamageIncrease))
        {
            victim.DamageTaken = 0;
            if (busy >= 0) game.busy[busy] = false;
            yield break;
        }
        int damage = (number + source.DamageIncrease) - victim.DamageDecrease;
        victim.DamageTaken = damage;
        if (victim.CurrentHealth - damage > 0) victim.CurrentHealth -= damage;
        else
        {
            victim.CurrentHealth = 0;
            int negativeHealth = victim.CurrentHealth - damage;
            if (victim.BrinkOfDeath != null) { game.busy[free] = true; victim.StartCoroutine(victim.BrinkOfDeath(negativeHealth, source, victim)); }
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        }
        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator takeDamage(int number, Player source, Player victim, Game.DamageType dmgType)
    {
        //while (game.Busy || game.Busy2) yield return new WaitForSeconds(0.1f);
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();
        lastDamagePlayer = source;

        if (victim.DamageTaken > 0)
        {
            CardForm armor = GetArmor();
            if (armor != null && armor.TakeDamage != null) { game.busy[free] = true; StartCoroutine(armor.TakeDamage(number, source, victim, dmgType)); }
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);

            if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.TakeDamage, number, source, victim, dmgType)); }
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
            if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.TakeDamage, number, source, victim, dmgType)); }
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        }

        victim.DamageTaken = 0;
        victim.lastDamageCard = null;
        source.DamageIncrease = 0;
        victim.DamageDecrease = 0;
        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
    }

    private IEnumerator causeDamage(int number, Player source, Player victim, Game.DamageType dmgType)
    {
        //while (game.Busy || game.Busy2) yield return new WaitForSeconds(0.1f);
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();
        lastDamagePlayer = source;

        if (victim.Attacked && victim.DamageTaken > 0)
        {
            victim.Attacked = false;
            CardForm weapon = GetWeapon();
            if (weapon != null && weapon.CauseDamage != null) { game.busy[free] = true; StartCoroutine(weapon.CauseDamage(number, source, victim, dmgType)); }
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        }

        if (victim.DamageTaken > 0)
        {
            if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.CauseDamage, number, source, victim, dmgType)); }
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);

            if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.CauseDamage, number, source, victim, dmgType)); }
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        }

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.5f);
    }

    private IEnumerator endAttack(int number, Player source, Player victim)
    {
        int busy = game.GetBusyTask();
        //int free = game.GetFreeTask();
        targetPlayer = null;
        if (turn == PlayerTurn.Action)
        {
            actionState = ActionState.Free;
        }
        else
        {
            actionState = ActionState.None;
        }

        victim.AdditionDodge = 0;
        if (busy >= 0) game.busy[busy] = false;
        if (game.GetBusyTask() < 0) game.PilesCollect();
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator onJudgment()
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();
        //while (game.Busy || game.Busy2) yield return new WaitForSeconds(0.1f);
        #region OnJudgment of Character 1 Ability Check
        if (this.Character1 != null)
        {
            foreach (CharacterAbility ability in this.Character1.Ability)
            {
                if (ability != null)
                {
                    if (ability.Form == CharacterAbility.AbilityForm.OnJudgment && ability.Status)
                    {
                        //Invoke ability or effect that happend before the judgment take an effect
                        game.busy[free] = true;
                        StartCoroutine(ability.Ability(0, this, this, Game.DamageType.Physical));

                        //Use Busy2 to stop the queuing
                        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
                    }
                }
            }
        }
        #endregion

        #region OnJudgment of Character 2 Ability Check
        if (this.Character2 != null)
        {
            foreach (CharacterAbility ability in this.Character2.Ability)
            {
                if (ability != null)
                {
                    if (ability.Form == CharacterAbility.AbilityForm.OnJudgment && ability.Status)
                    {
                        //Invoke ability or effect that happend before the judgment take an effect
                        game.busy[free] = true;
                        StartCoroutine(ability.Ability(0, this, this, Game.DamageType.Physical));

                        //Use Busy2 to stop the queuing
                        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
                    }
                }
            }
        }
        #endregion

        if (busy >= 0) game.busy[busy] = false;
    }

    private IEnumerator beforeJudgmentTakeEffect()
    {
        int busy = game.GetBusyTask();
        //int free = game.GetFreeTask();

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator afterJudgmentTakeEffect()
    {
        int busy = game.GetBusyTask();
        //int free = game.GetFreeTask();

        if (busy >= 0) game.busy[busy] = false;
        yield return new WaitForSeconds(0.1f);
    }

    private IEnumerator onDuel(int number, Player source, Player victim, Game.DamageType dmgType)
    {
        int busy = game.GetBusyTask();
        int free = game.GetFreeTask();

        victim.actionState = ActionState.OnDuel;
        source.actionState = ActionState.OnDuel;
        do
        {
            victim.actionState = ActionState.WaitingAttackDuel;
            if (victim == game.myPlayer)
            {
                game.btnCancel.SetActive(true);
                game.CancelClick += delegate()
                {
                    game.btnCancel.SetActive(false);
                    game.CancelClick = null;
                    victim.actionState = ActionState.None;
                };
            }
            else if (victim.AutoAI)
            {
                List<CardForm> hand = game.CardList.GetHandList(victim);
                int atkCount = 0;
                Debug.Log("Victim hand: " + hand.Count);
                foreach (CardForm cf in hand)
                {
                    if (cf is Attack || cf is MagicAttack)
                    { atkCount++; }
                }
                if (atkCount >= 1)
                {
                    for (int i = 0; i < hand.Count; i++)
                    {
                        if (hand[i] is Attack)
                        {
                            Attack atkCard = hand[i] as Attack;
                            victim.actionState = Player.ActionState.OnDuel;
                            atkCard.RespondDuel();
                            break;
                        }
                        else if (hand[i] is MagicAttack)
                        {
                            MagicAttack atkCard = hand[i] as MagicAttack;
                            atkCard.RespondDuel();
                            break;
                        }
                    }
                }
                else
                {
                    victim.actionState = ActionState.None;
                }
            }

            while (victim.actionState == ActionState.WaitingAttackDuel) yield return new WaitForSeconds(0.1f);

            if (victim.actionState == ActionState.None) break;

            source.actionState = ActionState.WaitingAttackDuel;
            if (source == game.myPlayer)
            {
                game.btnCancel.SetActive(true);
                game.CancelClick += delegate()
                {
                    game.btnCancel.SetActive(false);
                    game.CancelClick = null;
                    source.actionState = ActionState.None;
                };
            }
            else if (source.AutoAI)
            {
                List<CardForm> hand = game.CardList.GetHandList(source);
                Debug.Log("Source hand: " + hand.Count);
                int atkCount = 0;
                foreach (CardForm cf in hand)
                {
                    if (cf is Attack || cf is MagicAttack)
                    { atkCount++; }
                }
                if (atkCount >= 1)
                {
                    for (int i = 0; i < hand.Count; i++)
                    {
                        if (hand[i] is Attack)
                        {
                            Attack atkCard = hand[i] as Attack;
                            atkCard.RespondDuel();
                            break;
                        }
                        else if (hand[i] is MagicAttack)
                        {
                            MagicAttack atkCard = hand[i] as MagicAttack;
                            atkCard.RespondDuel();
                            break;
                        }
                    }
                    //source.actionState = ActionState.None;
                }
                else
                {
                    source.actionState = ActionState.None;
                }
            }
            while (source.actionState == ActionState.WaitingAttackDuel) yield return new WaitForSeconds(0.1f);
            yield return new WaitForSeconds(0.3f);

            if (source.actionState == ActionState.None) break;
        }
        while (victim.actionState != ActionState.None && source.actionState != ActionState.None);

        if (victim.actionState == ActionState.None)
        {
            game.busy[free] = true;
            if (source.DamageModifier != null) source.StartCoroutine(source.DamageModifier(number, source, victim, dmgType));
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
            game.busy[free] = true;
            if (victim.BeforeDamageCalculation != null) victim.StartCoroutine(victim.BeforeDamageCalculation(number, source, victim, dmgType));
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
            game.busy[free] = true;
            if (victim.DamageCalculation != null) victim.StartCoroutine(victim.DamageCalculation(number, source, victim, dmgType));
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        }
        else if (source.actionState == ActionState.None)
        {
            game.busy[free] = true;
            if (victim.DamageModifier != null) victim.StartCoroutine(victim.DamageModifier(number, source, source, dmgType));
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
            game.busy[free] = true;
            if (source.BeforeDamageCalculation != null) source.StartCoroutine(source.BeforeDamageCalculation(number, source, source, dmgType));
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
            game.busy[free] = true;
            if (source.DamageCalculation != null) source.StartCoroutine(source.DamageCalculation(number, source, source, dmgType));
            while (game.busy[free]) yield return new WaitForSeconds(0.1f);
        }

        if (victim.turn == PlayerTurn.Action) victim.actionState = ActionState.Free;
        else victim.actionState = ActionState.None;

        if (source.turn == PlayerTurn.Action) source.actionState = ActionState.Free;
        else source.actionState = ActionState.None;


        if (busy >= 0) game.busy[busy] = false;

        if (game.GetBusyTask() < 0) game.PilesCollect();
        yield return new WaitForSeconds(0.1f);
    }

    //private IEnumerator takePhysicDamage(int number, Player source, Player victim)
    //{
    //    int busy = game.GetBusyTask();
    //    int free = game.GetFreeTask();
    //    lastDamagePlayer = source;

    //    if (victim.DamageTaken > 0)
    //    {
    //        CardForm armor = GetArmor();
    //        if (armor != null && armor.TakePhysicDamage != null) { game.busy[free] = true; StartCoroutine(armor.TakePhysicDamage(number, source, victim)); }
    //        while (game.busy[free]) yield return new WaitForSeconds(0.1f);

    //        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.TakePhysicalDamage, number, source, victim)); }
    //        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
    //        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.TakePhysicalDamage, number, source, victim)); }
    //        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
    //    }

    //    victim.DamageTaken = 0;
    //    victim.lastDamageCard = null;
    //    source.DamageIncrease = 0;
    //    victim.DamageDecrease = 0;
    //    if (busy >= 0) game.busy[busy] = false;
    //    yield return new WaitForSeconds(0.5f);
    //}

    //private IEnumerator causePhysicDamage(int number, Player source, Player victim)
    //{
    //    int busy = game.GetBusyTask();
    //    int free = game.GetFreeTask();
    //    lastDamagePlayer = source;

    //    if (victim.Attacked && victim.DamageTaken > 0)
    //    {
    //        victim.Attacked = false;
    //        CardForm weapon = GetWeapon();
    //        if (weapon != null && weapon.CausePhysicDamage != null) { game.busy[free] = true; StartCoroutine(weapon.CausePhysicDamage(number, source, victim)); }
    //        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
    //    }
    //    if (victim.DamageTaken > 0)
    //    {
    //        if (Character1 != null) { game.busy[free] = true; StartCoroutine(Character1.AbilityActive(CharacterAbility.AbilityForm.CausePhysicalDamage, number, source, victim)); }
    //        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
    //        if (Character2 != null) { game.busy[free] = true; StartCoroutine(Character2.AbilityActive(CharacterAbility.AbilityForm.CausePhysicalDamage, number, source, victim)); }
    //        while (game.busy[free]) yield return new WaitForSeconds(0.1f);
    //    }

    //    if (busy >= 0) game.busy[busy] = false;
    //    yield return new WaitForSeconds(0.5f);
    //}

    #endregion

    void Start()
    {
        //GameObject btnHealth = gameObject.transform.FindChild("P6Health").GetComponent();
        try
        {
            if (gameObject.transform.FindChild("Weapon") != null) Weapon = gameObject.transform.FindChild("Weapon").gameObject;
            if (gameObject.transform.FindChild("Armor") != null) Armor = gameObject.transform.FindChild("Armor").gameObject;
            if (gameObject.transform.FindChild("Plus Vehicle") != null) PlusVehicle = gameObject.transform.FindChild("Plus Vehicle").gameObject;
            if (gameObject.transform.FindChild("Minus Vehicle") != null) MinusVehicle = gameObject.transform.FindChild("Minus Vehicle").gameObject;
            if (gameObject.transform.FindChild("Delay1") != null) Delay1 = gameObject.transform.FindChild("Delay1").gameObject;
            if (gameObject.transform.FindChild("Delay2") != null) Delay2 = gameObject.transform.FindChild("Delay2").gameObject;
            if (gameObject.transform.FindChild("Delay3") != null) Delay3 = gameObject.transform.FindChild("Delay3").gameObject;
            if (gameObject.transform.FindChild("Delay4") != null) Delay4 = gameObject.transform.FindChild("Delay4").gameObject;
            if (gameObject.transform.FindChild("Character1") != null) CharacterObject1 = gameObject.transform.FindChild("Character1").gameObject;
            if (gameObject.transform.FindChild("Character2") != null) CharacterObject2 = gameObject.transform.FindChild("Character2").gameObject;
            Transform healthObject = gameObject.transform.FindChild("Health");
            if (healthObject != null) health = healthObject.transform.FindChild("Text").GetComponent<Text>();
            Transform handObject = gameObject.transform.FindChild("Hand");
            if (handObject != null) hand = handObject.transform.FindChild("Text").GetComponent<Text>();

        }
        catch (Exception e)
        {
            Debug.Log(e.ToString());
        }
        if (Weapon != null) Weapon.SetActive(false);
        if (Armor != null) Armor.SetActive(false);
        if (PlusVehicle != null) PlusVehicle.SetActive(false);
        if (MinusVehicle != null) MinusVehicle.SetActive(false);
        if (Delay1 != null) Delay1.SetActive(false);
        if (Delay2 != null) Delay2.SetActive(false);
        if (Delay3 != null) Delay3.SetActive(false);
        if (Delay4 != null) Delay4.SetActive(false);

        if (CharacterObject1 != null)
        {
            Character1 = CharacterObject1.GetComponent<Character>();
            //CharacterObject1.SetActive(false);
            //Character1.game = this.game;
            //Character1.PlayerOwner = this;
        }
        if (CharacterObject2 != null)
        {
            Character2 = CharacterObject2.GetComponent<Character>();
            //CharacterObject2.SetActive(false);
            //Character2.game = this.game;
            //Character2.PlayerOwner = this;
        }

        this.Healing += healing;
        this.AfterHealing += afterHealing;
        this.BrinkOfDeath += brinkOfDeath;
        this.AttackDamageModifier += attackDamageModifier;
        this.BeforeDamageCalculation += beforeDamageCalculation;
        this.DamageCalculation += damageCalculation;
        this.BeforeAttack += beforeAttack;
        this.BeforeAttacked += beforeAttacked;
        this.EndAttack += endAttack;
        this.TakeDamage += takeDamage;
        this.CauseDamage += causeDamage;
        this.DamageModifier += damageModifier;
        this.OnJudgment += onJudgment;
        this.BeforeJudgmentTakeEffect += beforeJudgmentTakeEffect;
        this.AfterJudgmentTakeEffect += afterJudgmentTakeEffect;
        this.Duel += onDuel;
        this.BeginningOfTurn += beginingOfTurn;
        this.JudgmentPhase += judgmentPhase;
        this.DrawPhase += drawPhase;
        this.DiscardPhase += discardPhase;
        this.EndPhase += endPhase;
    }

    void Update()
    {
        try
        {
            if (health != null) health.text = this.CurrentHealth.ToString() + " / " + this.MaxHealth.ToString();
            List<CardForm> handList = game.CardList.GetHandList(this);
            if (hand != null) hand.text = handList.Count.ToString();
            if (OnWaitingAction != null)
            {
                OnWaitingAction.Invoke();
                OnWaitingAction = null;
            }
            //this.GetWeapon();
            //this.GetArmor();
            //this.GetPlusVehicle();
            //this.GetMinusVehicle();
            if (CharacterObject1 != null) Character1 = CharacterObject1.GetComponent<Character>();
            if (CharacterObject2 != null) Character2 = CharacterObject2.GetComponent<Character>();
            if (this.Character1 != null)
            {
                this.Character1.game = this.game;
                this.Character1.PlayerOwner = this;
            }
            if (this.Character2 != null)
            {
                this.Character2.game = this.game;
                this.Character2.PlayerOwner = this;
            }
        }
        catch { }
    }

}

