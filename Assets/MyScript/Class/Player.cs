//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class Player : MonoBehaviour
{
    public string PlayerName = "";
    public string IpAdress = "";
    public bool Status = true;
    public GameObject Character1;
    public GameObject Character2;
    public Guid PlayerID;
    public int HandLimit = 0;
    public int CurrentHealth = 0;
    public double MaxHealth = 0;
    public int AttackingRange = 0;
    public int MinusDistance = 0;
    public int PlusDistance = 0;
    private PlayerTurn turn = PlayerTurn.OutTurn;
    public bool AutoAI = false;
    public bool MainAttack = false;
    public bool CommandSeal = false;

    public GameObject Weapon, Armor, PlusVehicle, MinusVehicle;
    public GameObject Delay1, Delay2, Delay3, Delay4;
    Text health, maxHealth, hand;

    public Player targetPlayer;
    public Game game;
    
    public delegate void PhaseDelegate();
    public PhaseDelegate ChangePhase = null;
    public PhaseDelegate BeginningOfTurn = null;
    public PhaseDelegate DrawPhase = null;
    public PhaseDelegate JudgmentPhase = null;
    public PhaseDelegate ActionPhase = null;
    public PhaseDelegate DiscardPhase = null;
    public PhaseDelegate EndPhase = null;
    public PhaseDelegate OnWaitingAction = null;

    public delegate void EffectDelegate(int number, Player source, Player victim);
    public EffectDelegate BeforeAttack = null;
    public EffectDelegate BeforeAttacked = null;
    public EffectDelegate TakeMagicDamage = null;
    public EffectDelegate TakePhysicDamage = null;
    public EffectDelegate CauseMagicDamage = null;
    public EffectDelegate CausePhysicDamage = null;
    public EffectDelegate Healing = null;
    public EffectDelegate AfterHealing = null;
    public EffectDelegate BrinkOfDeath = null;
    public EffectDelegate EndAttack = null;


    public delegate int ModifierDelegate(int number, Player source, Player victim);
    public ModifierDelegate AttackDamageModifier = null;
    public ModifierDelegate DamageModifier = null;
    public ModifierDelegate DamageCalculation = null;
    public ModifierDelegate HealModifier = null;

    public enum ActionState
    {
        None, Free, WaitingDodge, WaitingTool, WaitingRhoAias, WaitingBoD, WaitingSave
    }

    public enum PlayerTurn
    {
        Beginning = 0,
        Judgment = 1,
        Draw = 2,
        Action = 3,
        Discard = 4,
        End = 5,
        OutTurn = 6,
    }

    public ActionState actionState = ActionState.None;

    public PlayerTurn Turn
    {
        get { return turn; }
        set 
        { 
            turn = value; 
            if(turn == PlayerTurn.Beginning)
            {
                if (BeginningOfTurn != null) BeginningOfTurn.Invoke();
                //if (ChangePhase != null) ChangePhase.Invoke();
            }
            else if(turn == PlayerTurn.Judgment)
            {
                if (JudgmentPhase != null) JudgmentPhase.Invoke();
                //if (ChangePhase != null) ChangePhase.Invoke();
            }
            else if (turn == PlayerTurn.Draw)
            {
                if (DrawPhase != null) DrawPhase.Invoke();
            }
            else if (turn == PlayerTurn.Action)
            {
                if (ActionPhase != null) ActionPhase.Invoke();
                this.actionState = ActionState.Free;
            }
            else if (turn == PlayerTurn.Discard)
            {
                if (DiscardPhase != null) DiscardPhase.Invoke();
            }
            else if (turn == PlayerTurn.End)
            {
                if (EndPhase != null) EndPhase.Invoke();
            }
            else if (turn == PlayerTurn.OutTurn)
            {
                MainAttack = false;
            }
            if (turn != PlayerTurn.Action && turn != PlayerTurn.OutTurn)
            {
                System.Threading.Timer time = new System.Threading.Timer(delegate(object sender)
                {
                    if (ChangePhase != null) OnWaitingAction += ChangePhase;
                });
                time.Change(1000, 0);
            }
        }
    }

    public string GetPhase()
    {
        if (turn == PlayerTurn.Beginning) return "Beginning of Turn";
        if (turn == PlayerTurn.Judgment) return "Judgment Phase";
        if (turn == PlayerTurn.Draw) return "Draw Phase";
        if (turn == PlayerTurn.Action) return "Action Phase";
        if (turn == PlayerTurn.Discard) return "Discard Phase";
        if (turn == PlayerTurn.End) return "End Phase";

        return "End Turn";
    }

    #region Event Delegate
    public virtual int damageCalculation(int number, Player source, Player victim)
    {
        if (victim.CurrentHealth > 0) victim.CurrentHealth -= number;
        else
        {
            if (victim.BrinkOfDeath != null) victim.BrinkOfDeath.Invoke(number, source, victim);
        }
        return number;
    }

    public virtual void brinkOfDeath(int number, Player source, Player victim)
    {
        actionState = ActionState.WaitingBoD;
    }

    public virtual void healing(int number, Player source, Player victim)
    {
        if (HealModifier != null) number = HealModifier.Invoke(number, source, victim);
        if (victim.CurrentHealth < victim.MaxHealth) victim.CurrentHealth += number;
        if (AfterHealing != null) AfterHealing.Invoke(number, source, victim);
    }

    public virtual void beforeAttack(int number, Player source, Player victim)
    {
        actionState = ActionState.None;
        targetPlayer = victim;
        MainAttack = true;
    }

    public virtual void beforeAttacked(int number, Player source, Player victim)
    {
        actionState = ActionState.WaitingDodge;
        targetPlayer = source;
        if (!AutoAI)
        {
            game.btnCancel.SetActive(true);
            game.CancelClick += delegate()
            {
                if (victim.DamageCalculation != null) number = victim.DamageCalculation.Invoke(number, source, victim);
                if (source.CauseMagicDamage != null) source.CauseMagicDamage.Invoke(number, source, victim);
                if (victim.TakeMagicDamage != null) victim.TakeMagicDamage.Invoke(number, source, victim);
                if (source.EndAttack != null) source.EndAttack.Invoke(number, source, victim);
                if (victim.EndAttack != null) victim.EndAttack.Invoke(number, source, victim);
                game.PilesCollect();
            };
        }
        else
        {
            List<CardForm> hand = game.CardList.GetHandList(this);
            foreach (CardForm cf in hand)
            {
                if (cf is Dodge)
                {
                    Dodge dodge = cf as Dodge;
                    dodge.UseCard();

                    return;
                }
            }
            if (victim.DamageCalculation != null) number = victim.DamageCalculation.Invoke(number, source, victim);
            if (source.CauseMagicDamage != null) source.CauseMagicDamage.Invoke(number, source, victim);
            if (victim.TakeMagicDamage != null) victim.TakeMagicDamage.Invoke(number, source, victim);
            if (source.EndAttack != null) source.EndAttack.Invoke(number, source, victim);
            if (victim.EndAttack != null) victim.EndAttack.Invoke(number, source, victim);
            game.PilesCollect();
        }
    }

    public virtual void endAttack(int number, Player source, Player victim)
    {
        targetPlayer = null;
        if (turn == PlayerTurn.Action)
        {
            actionState = ActionState.Free;
        }
        else
        {
            actionState = ActionState.None;
        }
    }

    public virtual void afterHealing(int number, Player source, Player victim)
    {

    }

    public virtual int attackDamageModifier(int number, Player source, Player victim)
    {
        if (CommandSeal) number = number + 1;
        return number;
    }

    public virtual int damageModifier(int number, Player source, Player victim)
    {
        return number;
    }

    public virtual void takeMagicDamage(int number, Player source, Player victim)
    {
        
    }

    public virtual void causeMagicDamage(int number, Player source, Player victim)
    {

    }

    public virtual void takePhysicDamage(int number, Player source, Player victim)
    {

    }

    public virtual void causePhysicDamage(int number, Player source, Player victim)
    {

    }
    #endregion

    void Start()
    {
        //GameObject btnHealth = gameObject.transform.FindChild("P6Health").GetComponent();
        try
        {
            if (gameObject.transform.FindChild("Weapon")!=null) Weapon = gameObject.transform.FindChild("Weapon").gameObject;
            if (gameObject.transform.FindChild("Armor") != null) Armor = gameObject.transform.FindChild("Armor").gameObject;
            if (gameObject.transform.FindChild("Plus Vehicle") != null) PlusVehicle = gameObject.transform.FindChild("Plus Vehicle").gameObject;
            if (gameObject.transform.FindChild("Minus Vehicle") != null) MinusVehicle = gameObject.transform.FindChild("Minus Vehicle").gameObject;
            if (gameObject.transform.FindChild("Delay1") != null) Delay1 = gameObject.transform.FindChild("Delay1").gameObject;
            if (gameObject.transform.FindChild("Delay2") != null) Delay2 = gameObject.transform.FindChild("Delay2").gameObject;
            if (gameObject.transform.FindChild("Delay3") != null) Delay3 = gameObject.transform.FindChild("Delay3").gameObject;
            if (gameObject.transform.FindChild("Delay4") != null) Delay4 = gameObject.transform.FindChild("Delay4").gameObject;
            Transform healthObject = gameObject.transform.FindChild("Health");
            if (healthObject!=null) health = healthObject.transform.FindChild("Text").GetComponent<Text>();
            Transform maxHealthObject = gameObject.transform.FindChild("MaxHealth");
            if (maxHealthObject != null) maxHealth = maxHealthObject.transform.FindChild("Text").GetComponent<Text>();
            Transform handObject = gameObject.transform.FindChild("Hand");
            if (handObject != null) hand = handObject.transform.FindChild("Text").GetComponent<Text>();
            
        }
        catch (Exception e)
        {
            Debug.Log(e.ToString());
        }
        if (Weapon != null) Weapon.SetActive(false);
        if (Armor != null) Armor.SetActive(false);
        if (PlusVehicle != null) PlusVehicle.SetActive(false);
        if (MinusVehicle != null) MinusVehicle.SetActive(false);
        if (Delay1 != null) Delay1.SetActive(false);
        if (Delay2 != null) Delay2.SetActive(false);
        if (Delay3 != null) Delay3.SetActive(false);
        if (Delay4 != null) Delay4.SetActive(false);

        this.Healing += healing;
        this.AfterHealing += afterHealing;
        this.BrinkOfDeath += brinkOfDeath;
        this.AttackDamageModifier += attackDamageModifier;
        this.DamageCalculation += damageCalculation;
        this.BeforeAttack += beforeAttack;
        this.BeforeAttacked += beforeAttacked;
        this.EndAttack += endAttack;
        this.TakeMagicDamage += takeMagicDamage;
        this.TakePhysicDamage += takePhysicDamage;
        this.CauseMagicDamage += causeMagicDamage;
        this.CausePhysicDamage += causePhysicDamage;
        this.DamageModifier += damageModifier;

    }

    void Update()
    {
        try
        {
            if (health != null) health.text = this.CurrentHealth.ToString();
            if (health != null) maxHealth.text = this.MaxHealth.ToString();
            List<CardForm> handList = game.CardList.GetHandList(this);
            if (hand != null) hand.text = handList.Count.ToString();
            if(OnWaitingAction != null)
            {
                OnWaitingAction.Invoke();
                OnWaitingAction = null;
            }
            if(game!=null && DrawPhase == null)
            {
                this.DrawPhase += game.DrawCard;
            }
            if (game != null && ChangePhase == null)
            {
                this.ChangePhase += game.ChangePhase;
            }
        }
        catch { }
    }
    
}

