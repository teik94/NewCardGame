//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;
using System.Collections.Generic;
using System.Linq;

public class Game : MonoBehaviour
{
	public Hashtable PlayerList = new Hashtable();
    public Hashtable CardInGame = new Hashtable();
    public Hashtable GameObjList = new Hashtable();
    public List<CardForm> CardList = new List<CardForm>();
    public GameObject mainPanel;
    public Player myPlayer;
    public Player oppPlayer;

	// Use this for initialization
	void Start () {
        mainPanel = GameObject.Find("Main Panel");
        myPlayer = new Player("AltimaZ");
        oppPlayer = new Player("Cpu AI");
        InitListCard();
	}

	// Update is called once per frame
	void Update () {
        foreach (CardForm cf in CardList)
        {
            cf.Update();
        }
	}

	public void CreateCard()
	{
        System.Random rd = new System.Random();
        List<CardForm> deck = CardList.GetDeckList();
        int index = rd.Next(0, deck.Count - 1);
        CardForm cf = deck[index];
        cf.DrawFromDeck();
	}

    public void InitListCard()
    {
        //CardList = new List<CardForm>();
        CardList.Add(new Attack(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Club, Card.CardNumber.Five, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Club, Card.CardNumber.Four, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Diamond, Card.CardNumber.Jack, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Heart, Card.CardNumber.King, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Heart, Card.CardNumber.Ace, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Diamond, Card.CardNumber.Ace, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Spade, Card.CardNumber.Six, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Spade, Card.CardNumber.Ten, Card.CardState.None, myPlayer, this));
        CardList.Add(new Attack(Card.CardSuit.Spade, Card.CardNumber.Three, Card.CardState.None, myPlayer, this));

        //foreach (CardForm cf in cardList)
        //{
        //    CardInGame.Add(cf.CardID, cf);
        //}
    }

    #region Function
    public static void CommandProcess(Command cm)
    {
        if (cm == null)
            return;
        else
        {
            if (cm.Command_Code == CommandCode.Attack)
            {
                //Attack card = 
            }
        }
    }

    public void Heal(int number, Guid source, Guid target)
    {
        //Player sourcePlayer = (Player)PlayerList [source];
        Player targetPlayer = (Player)PlayerList[target];
        if (targetPlayer != null)
        {
            targetPlayer.CurrentHealth += number;
        }
    }

    public void CausePhysicalDamage(int number, Guid source, Guid target)
    {
        Player targetPlayer = (Player)PlayerList[target];
        if (targetPlayer != null)
        {
            targetPlayer.CurrentHealth -= number;
        }
    }

    public void CauseMagicDamage(int number, Guid source, Guid target)
    {
        Player targetPlayer = (Player)PlayerList[target];
        if (targetPlayer != null)
        {
            targetPlayer.CurrentHealth -= number;
        }
    }

    public void LossOfHealth(int number, Guid source, Guid target)
    {
        Player targetPlayer = (Player)PlayerList[target];
        if (targetPlayer != null)
        {
            targetPlayer.CurrentHealth -= number;
        }
    }

    public void DrawCard(GameObject go)
    {
        
    }
    #endregion
}

public static class Extension
{
    public static object GetItemByIndex(this Hashtable list, int index)
    {
        int i = 0;
        foreach (DictionaryEntry item in list)
        {
            if(i==index)
            {
                return item;
            }
            i++;
        }
        return null;
    }

    public static List<CardForm> GetHandList(this List<CardForm> list)
    {
        List<CardForm> hand = new List<CardForm>();
        foreach (CardForm cf in list)
        {
            if(cf.Form.State == Card.CardState.Hand)
            {
                hand.Add(cf);
            }
        }
        hand = hand.OrderBy(x => x.Form.LastInteract).ToList();
        return hand;
    }

    public static List<CardForm> GetDeckList(this List<CardForm> list)
    {
        List<CardForm> hand = new List<CardForm>();
        foreach (CardForm cf in list)
        {
            if (cf.Form.State == Card.CardState.None)
            {
                hand.Add(cf);
            }
        }
        hand = hand.OrderBy(x => x.Form.LastInteract).ToList();
        return hand;
    }
}


