//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using System.Linq;

public class Game : MonoBehaviour
{
    public Hashtable PlayerList = new Hashtable();
    public Hashtable CardInGame = new Hashtable();
    public Hashtable GameObjList = new Hashtable();
    public List<CardForm> CardList = new List<CardForm>();
    public GameObject mainPanel, mainPlayerPanel, handPanel, tempPanel, characterPanel;
    public GameObject playerPanel6, playerPanel1, playerPanel2, playerPanel3, playerPanel4, playerPanel5;
    public GameObject playerPanel7, playerPanel8, playerPanel9, playerPanel10, playerPanel11;
    public GameObject equipmentPanel;
    public Player myPlayer;
    public Player oppPlayer;
    List<Player> playerList = new List<Player>();
    public Player playerTurn;
    private CardForm processingCard;
    public GameObject btnUse, btnCancel;
    Text phase, yourHealth;

    public delegate void EventCustom();
    public EventCustom CancelClick;

    public CardForm ProcessingCard
    {
        get { return processingCard; }
        set
        {
            if (processingCard != null) processingCard.Form.HasBorder = false;
            processingCard = value;
            if (processingCard != null) processingCard.Form.HasBorder = true;
            if (processingCard != null)
            {
                //btnCancel.SetActive(true);
                if (processingCard is Attack)
                {
                    if (!processingCard.Form.Owner.MainAttack
                        && processingCard.Form.Owner.actionState == Player.ActionState.Free)
                    {
                        btnUse.SetActive(true);
                    }
                    else
                    {
                        btnUse.SetActive(false);
                    }
                }
                else if (processingCard is Dodge)
                {
                    if (processingCard.Form.Owner.actionState == Player.ActionState.WaitingDodge)
                    {
                        btnUse.SetActive(true);
                    }
                    else
                    {
                        btnUse.SetActive(false);
                    }
                }
                else if (processingCard is HolyGrail)
                {
                    if (processingCard.Form.Owner.actionState == Player.ActionState.WaitingBoD)
                    {
                        btnUse.SetActive(true);
                    }
                    else if (processingCard.Form.Owner.actionState == Player.ActionState.Free
                        && processingCard.Form.Owner.CurrentHealth < processingCard.Form.Owner.MaxHealth)
                    {
                        btnUse.SetActive(true);
                    }
                }
                else if (processingCard is CommandSeal)
                {
                    if (processingCard.Form.Owner.actionState == Player.ActionState.WaitingBoD)
                    {
                        btnUse.SetActive(true);
                    }
                    else if (processingCard.Form.Owner.actionState == Player.ActionState.Free
                        && !processingCard.Form.Owner.CommandSeal)
                    {
                        btnUse.SetActive(true);
                    }
                }
                else if (processingCard.Form.CardData.Type == Card.CardType.Weapon ||
                    processingCard.Form.CardData.Type == Card.CardType.Armor ||
                    processingCard.Form.CardData.Type == Card.CardType.MinusVehicle ||
                    processingCard.Form.CardData.Type == Card.CardType.PlusVehicle)
                {
                    if (processingCard.Form.Owner.actionState == Player.ActionState.Free)
                    {
                        btnUse.SetActive(true);
                    }
                }
                else
                {
                    btnUse.SetActive(false);
                }
            }
            else
            {
                //btnCancel.SetActive(false);
                btnUse.SetActive(false);
            }
        }
    }

    // Use this for initialization
    void Start()
    {
        //Setup Global Game Variable
        mainPanel = GameObject.Find("Main Panel");
        mainPlayerPanel = GameObject.Find("MainPlayer Panel");
        playerPanel1 = GameObject.Find("Player 1 Panel");
        playerPanel2 = GameObject.Find("Player 2 Panel");
        playerPanel3 = GameObject.Find("Player 3 Panel");
        playerPanel4 = GameObject.Find("Player 4 Panel");
        playerPanel5 = GameObject.Find("Player 5 Panel");
        playerPanel6 = GameObject.Find("Player 6 Panel");
        playerPanel7 = GameObject.Find("Player 7 Panel");
        playerPanel8 = GameObject.Find("Player 8 Panel");
        playerPanel9 = GameObject.Find("Player 9 Panel");
        playerPanel10 = GameObject.Find("Player 10 Panel");
        playerPanel11 = GameObject.Find("Player 11 Panel");
        characterPanel = GameObject.Find("Character Panel");
        handPanel = GameObject.Find("Hand Card Panel");
        btnUse = GameObject.Find("Use Button");
        btnCancel = GameObject.Find("Cancel Button");
        tempPanel = GameObject.Find("Use Card Panel");
        equipmentPanel = GameObject.Find("Equipment Panel");
        phase = gameObject.transform.FindChild("Phase").transform.FindChild("Text").GetComponent<Text>();
        btnUse.SetActive(false);
        btnCancel.SetActive(false);
        yourHealth = characterPanel.transform.FindChild("Health").transform.FindChild("Text").GetComponent<Text>();

        //Initilizing All Deck Cards
        InitListCard();

        List<Player> temp = new List<Player>();
        myPlayer = mainPlayerPanel.GetComponent<Player>();
        myPlayer.game = this;
        temp.Add(mainPlayerPanel.GetComponent<Player>());
        temp.Add(playerPanel1.GetComponent<Player>());
        temp.Add(playerPanel2.GetComponent<Player>());
        temp.Add(playerPanel3.GetComponent<Player>());
        temp.Add(playerPanel4.GetComponent<Player>());
        temp.Add(playerPanel5.GetComponent<Player>());
        temp.Add(playerPanel6.GetComponent<Player>());
        temp.Add(playerPanel7.GetComponent<Player>());
        temp.Add(playerPanel8.GetComponent<Player>());
        temp.Add(playerPanel9.GetComponent<Player>());
        temp.Add(playerPanel10.GetComponent<Player>());
        temp.Add(playerPanel11.GetComponent<Player>());

        foreach (Player p in temp)
        {
            if (p.Status)
            {
                p.game = this;
                DrawXCard(4, p);
                playerList.Add(p);
            }
            else
            {
                p.gameObject.SetActive(false);
            }
        }

        //Draw 4 cards starting for each player
        //DrawXCard(4, myPlayer);
        //DrawXCard(4, oppPlayer);

        //myPlayer.DrawPhase += DrawCard;
        //myPlayer.ChangePhase += ChangePhase;
        //oppPlayer.DrawPhase += DrawCard;
        //oppPlayer.ChangePhase += ChangePhase;

        //Determine who goes first
        playerTurn = myPlayer;
        playerTurn.Turn = Player.PlayerTurn.Beginning;
    }

    // Update is called once per frame
    void Update()
    {
        if (playerTurn != null) phase.text = playerTurn.GetPhase();
        if (yourHealth != null) yourHealth.text = myPlayer.CurrentHealth + "/" + myPlayer.MaxHealth;
        foreach (CardForm cf in CardList)
        {
            cf.Update();
        }
    }

    public void OpenDialog()
    {

    }

    public void DrawCard()
    {
        DrawXCard(2, playerTurn);
    }

    public void DrawXCard(int number, Player player)
    {
        if (number == 0) return;
        System.Random rd = new System.Random();
        List<CardForm> deck = CardList.GetDeckList();
        int index = rd.Next(0, deck.Count - 1);
        CardForm cf = deck[index];
        cf.DrawFromDeck(number, player);
    }

    public void InitListCard()
    {
        CardList.Add(new Attack(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Club, Card.CardNumber.Five, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Club, Card.CardNumber.Four, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Diamond, Card.CardNumber.Jack, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Heart, Card.CardNumber.King, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Heart, Card.CardNumber.Ace, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Diamond, Card.CardNumber.Ace, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Spade, Card.CardNumber.Six, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Spade, Card.CardNumber.Ten, Card.CardState.None, null, this));
        CardList.Add(new Attack(Card.CardSuit.Spade, Card.CardNumber.Three, Card.CardState.None, null, this));

        CardList.Add(new BerserCar(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new GaeBuidhe(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new GilgameshArmor(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new Hrunting(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new KanshouBakuya(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new Monohoshizao(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new Pegasus(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new Vimana(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new YamahaVmax(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new PrelatiSpellbook(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new Avalon(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));
        CardList.Add(new SaberArmor(Card.CardSuit.Club, Card.CardNumber.Eight, Card.CardState.None, null, this));

        //CardList.Add(new Dodge(Card.CardSuit.Spade, Card.CardNumber.Three, Card.CardState.None, null, this));
        //CardList.Add(new Dodge(Card.CardSuit.Heart, Card.CardNumber.Four, Card.CardState.None, null, this));
        //CardList.Add(new Dodge(Card.CardSuit.Spade, Card.CardNumber.Ace, Card.CardState.None, null, this));
        //CardList.Add(new Dodge(Card.CardSuit.Club, Card.CardNumber.Two, Card.CardState.None, null, this));
        //CardList.Add(new Dodge(Card.CardSuit.Heart, Card.CardNumber.Queen, Card.CardState.None, null, this));
        //CardList.Add(new Dodge(Card.CardSuit.Diamond, Card.CardNumber.Seven, Card.CardState.None, null, this));
        //CardList.Add(new Dodge(Card.CardSuit.Diamond, Card.CardNumber.Ten, Card.CardState.None, null, this));
        //CardList.Add(new Dodge(Card.CardSuit.Heart, Card.CardNumber.King, Card.CardState.None, null, this));

        //CardList.Add(new HolyGrail(Card.CardSuit.Heart, Card.CardNumber.Three, Card.CardState.None, null, this));
        //CardList.Add(new HolyGrail(Card.CardSuit.Heart, Card.CardNumber.Three, Card.CardState.None, null, this));
        //CardList.Add(new HolyGrail(Card.CardSuit.Heart, Card.CardNumber.Three, Card.CardState.None, null, this));
        //CardList.Add(new HolyGrail(Card.CardSuit.Heart, Card.CardNumber.Three, Card.CardState.None, null, this));
        //CardList.Add(new HolyGrail(Card.CardSuit.Heart, Card.CardNumber.Three, Card.CardState.None, null, this));
        //CardList.Add(new HolyGrail(Card.CardSuit.Heart, Card.CardNumber.Three, Card.CardState.None, null, this));
        //CardList.Add(new HolyGrail(Card.CardSuit.Heart, Card.CardNumber.Three, Card.CardState.None, null, this));

        //CardList.Add(new CommandSeal(Card.CardSuit.Club, Card.CardNumber.Three, Card.CardState.None, "CommandSeal1", null, this));
        //CardList.Add(new CommandSeal(Card.CardSuit.Club, Card.CardNumber.Three, Card.CardState.None, "CommandSeal2", null, this));
        //CardList.Add(new CommandSeal(Card.CardSuit.Club, Card.CardNumber.Three, Card.CardState.None, "CommandSeal3", null, this));
        //CardList.Add(new CommandSeal(Card.CardSuit.Spade, Card.CardNumber.Three, Card.CardState.None, "CommandSeal4", null, this));
        //CardList.Add(new CommandSeal(Card.CardSuit.Spade, Card.CardNumber.Three, Card.CardState.None, "CommandSeal5", null, this));
        //CardList.Add(new CommandSeal(Card.CardSuit.Spade, Card.CardNumber.Three, Card.CardState.None, "CommandSeal6", null, this));
    }

    public void UseCard()
    {
        ProcessingCard.UseCard();
        this.ProcessingCard = null;
    }

    public void Cancel()
    {
        btnCancel.SetActive(false);
        if (CancelClick != null) CancelClick.Invoke();
    }

    public virtual void PilesCollect()
    {
        System.Threading.Timer time = new System.Threading.Timer(delegate(object sender)
        {
            List<CardForm> usingCard = CardList.GetUsingList();
            foreach (CardForm cf in usingCard)
            {
                cf.Form.State = Card.CardState.Piles;
                cf.Form.CardData.State = Card.CardState.Piles;
                cf.Form.Active = false;
            }
        });
        time.Change(1000, 0);
    }

    #region Function
    public static void CommandProcess(Command cm)
    {
        if (cm == null)
            return;
        else
        {
            if (cm.Command_Code == CommandCode.Attack)
            {
                //Attack card = 
            }
        }
    }

    public void CancelProcessingCard()
    {
        this.ProcessingCard = null;
    }

    public void Attack(int number, Player source, Player victim)
    {
        if (source.AttackDamageModifier != null) number = source.AttackDamageModifier.Invoke(number, source, victim);
        if (source.BeforeAttack != null) source.BeforeAttack.Invoke(number, source, victim);
        if (victim.BeforeAttacked != null) victim.BeforeAttacked.Invoke(number, source, victim);


        //if (victim.DamageCalculation != null) number = victim.DamageCalculation.Invoke(number, source, victim);
        //if (source.CauseDamage != null) source.CauseDamage.Invoke(number, source, victim);
        //if (victim.TakeDamage != null) victim.TakeDamage.Invoke(number, source, victim);

        //if (source.EndAttack != null) source.EndAttack.Invoke(number, source, victim);
        //if (victim.EndAttack != null) victim.EndAttack.Invoke(number, source, victim);

        //source.DamageCalculationModifier = null;
        //source.DamageCalculation += source.damageCalculationModifer;
        //source.BeforeAttack = null;
        //source.BeforeAttack += source.beforeAttack;
        //victim.BeforeAttacked = null;
        //victim.BeforeAttacked += victim.beforeAttacked;
        //victim.DamageCalculation = null;
        //victim.DamageCalculation += victim.damageCalculation;
        //source.CauseDamage = null;
        //victim.TakeDamage = null;
    }

    public void ChangePhase()
    {
        //playerTurn = myPlayer;
        if (playerTurn.Turn == Player.PlayerTurn.OutTurn) playerTurn.Turn = Player.PlayerTurn.Beginning;
        else if (playerTurn.Turn == Player.PlayerTurn.Beginning) playerTurn.Turn = Player.PlayerTurn.Judgment;
        else if (playerTurn.Turn == Player.PlayerTurn.Judgment) playerTurn.Turn = Player.PlayerTurn.Draw;
        else if (playerTurn.Turn == Player.PlayerTurn.Draw) playerTurn.Turn = Player.PlayerTurn.Action;
        else if (playerTurn.Turn == Player.PlayerTurn.Action) playerTurn.Turn = Player.PlayerTurn.Discard;
        else if (playerTurn.Turn == Player.PlayerTurn.Discard) playerTurn.Turn = Player.PlayerTurn.End;
        else if (playerTurn.Turn == Player.PlayerTurn.End)
        {
            playerTurn.Turn = Player.PlayerTurn.OutTurn;

            //Determine next player
            if (playerTurn == myPlayer)
            {
                playerTurn = oppPlayer;
                playerTurn.Turn = Player.PlayerTurn.Beginning;
            }
            else
            {
                playerTurn = myPlayer;
                playerTurn.Turn = Player.PlayerTurn.Beginning;
            }
        }



    }
    #endregion
}

public static class Extension
{
    public static object GetItemByIndex(this Hashtable list, int index)
    {
        int i = 0;
        foreach (DictionaryEntry item in list)
        {
            if (i == index)
            {
                return item;
            }
            i++;
        }
        return null;
    }

    public static List<CardForm> GetHandList(this List<CardForm> list, Player player)
    {
        List<CardForm> hand = new List<CardForm>();
        foreach (CardForm cf in list)
        {
            if (cf.Form.State == Card.CardState.Hand && cf.Form.Owner == player)
            {
                hand.Add(cf);
            }
        }
        hand = hand.OrderBy(x => x.Form.LastInteract).ToList();
        return hand;
    }

    public static List<CardForm> GetDeckList(this List<CardForm> list)
    {
        List<CardForm> hand = new List<CardForm>();
        foreach (CardForm cf in list)
        {
            if (cf.Form.State == Card.CardState.None)
            {
                hand.Add(cf);
            }
        }
        hand = hand.OrderBy(x => x.Form.LastInteract).ToList();
        return hand;
    }

    public static List<CardForm> GetUsingList(this List<CardForm> list)
    {
        List<CardForm> usingList = new List<CardForm>();
        foreach (CardForm cf in list)
        {
            if (cf.Form.State == Card.CardState.Using)
            {
                usingList.Add(cf);
            }
        }
        usingList = usingList.OrderBy(x => x.Form.LastInteract).ToList();
        return usingList;
    }

}


