//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class Player : MonoBehaviour
{
    public string PlayerName = "";
    public string IpAdress = "";
    public bool Status = true;
    public Character Character1;
    public Character Character2;
    public Guid PlayerID;
    public int HandLimit = 0;
    public int CurrentHealth = 0;
    public double MaxHealth = 0;
    public int AttackingRange = 1;
    public int MinusDistance = 0;
    public int PlusDistance = 0;
    private PlayerTurn turn = PlayerTurn.OutTurn;
    public bool AutoAI = false;

    public Game game;
    Text health, maxHealth, hand;
    public delegate void PhaseDelegate();
    public PhaseDelegate ChangePhase = null;
    public PhaseDelegate BeginningOfTurn = null;
    public PhaseDelegate DrawPhase = null;
    public PhaseDelegate JudgmentPhase = null;
    public PhaseDelegate ActionPhase = null;
    public PhaseDelegate DiscardPhase = null;
    public PhaseDelegate EndPhase = null;

    public delegate void EffectDelegate(int number, Player source, Player victim);
    public EffectDelegate BeforeAttack = null;
    public EffectDelegate BeforeAttacked = null;
    public EffectDelegate TakeDamage = null;
    public EffectDelegate CauseDamage = null;
    public EffectDelegate Healing = null;
    public EffectDelegate BrinkOfDeath = null;

    public delegate int DamageModifierDelegate(int number, Player source, Player victim);
    public DamageModifierDelegate DamageCalculationModifier = null;
    public DamageModifierDelegate DamageCalculation = null;


    public PhaseDelegate OnWaitingAction = null;

    public PlayerTurn Turn
    {
        get { return turn; }
        set 
        { 
            turn = value; 
            if(turn == PlayerTurn.Beginning)
            {
                if (BeginningOfTurn != null) BeginningOfTurn.Invoke();
                //if (ChangePhase != null) ChangePhase.Invoke();
            }
            else if(turn == PlayerTurn.Judgment)
            {
                if (JudgmentPhase != null) JudgmentPhase.Invoke();
                //if (ChangePhase != null) ChangePhase.Invoke();
            }
            else if (turn == PlayerTurn.Draw)
            {
                if (DrawPhase != null) DrawPhase.Invoke();
            }
            else if (turn == PlayerTurn.Action)
            {
                if (ActionPhase != null) ActionPhase.Invoke();
            }
            else if (turn == PlayerTurn.Discard)
            {
                if (DiscardPhase != null) DiscardPhase.Invoke();
            }
            else if (turn == PlayerTurn.End)
            {
                if (EndPhase != null) EndPhase.Invoke();
            }

            if (turn != PlayerTurn.Action && turn != PlayerTurn.OutTurn)
            {
                System.Threading.Timer time = new System.Threading.Timer(delegate(object sender)
                {
                    if (ChangePhase != null) OnWaitingAction += ChangePhase;
                });
                time.Change(1000, 0);
            }
        }
    }
 
    public enum PlayerTurn
    {
        Beginning = 0,
        Judgment = 1,
        Draw = 2,
        Action = 3,
        Discard = 4,
        End = 5,
        OutTurn = 6,
    }

    public Player(string name)
    {
        this.PlayerName = name;
        PlayerID = Guid.NewGuid();
    }

    public string GetPhase()
    {
        if (turn == PlayerTurn.Beginning) return "Beginning of Turn";
        if (turn == PlayerTurn.Judgment) return "Judgment Phase";
        if (turn == PlayerTurn.Draw) return "Draw Phase";
        if (turn == PlayerTurn.Action) return "Action Phase";
        if (turn == PlayerTurn.Discard) return "Discard Phase";
        if (turn == PlayerTurn.End) return "End Phase";

        return "End Turn";
    }

    public virtual int damageCalculation(int number, Player source, Player victim)
    {
        if (victim.CurrentHealth>0) victim.CurrentHealth -= number;
        else
        {
            if (victim.BrinkOfDeath != null) victim.BrinkOfDeath.Invoke(number, source, victim);
        }
        return number;
    }

    public virtual void brinkOfDeath(int number, Player source, Player victim)
    {
        
    }

    public virtual void Heal(int number, Player source, Player victim)
    {
        if (Healing != null) Healing.Invoke(number, source, victim);
        if (victim.CurrentHealth < victim.MaxHealth) victim.CurrentHealth += number;
    }

    public virtual void beforeAttack(int number, Player source, Player victim)
    {
        
    }

    public virtual void beforeAttacked(int number, Player source, Player victim)
    {

    }

    void Start()
    {
        //GameObject btnHealth = gameObject.transform.FindChild("P6Health").GetComponent();
        try
        {
            health = gameObject.transform.FindChild("Health").transform.FindChild("Text").GetComponent<Text>();
            maxHealth = gameObject.transform.FindChild("MaxHealth").transform.FindChild("Text").GetComponent<Text>();
            hand = gameObject.transform.FindChild("Hand").transform.FindChild("Text").GetComponent<Text>();
            this.Healing += Heal;
            this.BrinkOfDeath += brinkOfDeath;
            this.DamageCalculation += damageCalculation;
            this.BeforeAttack += beforeAttack;
            this.BeforeAttacked += beforeAttacked;
        }
        catch { }
    }

    void Update()
    {
        
        try
        {
            if (health != null) health.text = this.CurrentHealth.ToString();
            if (health != null) maxHealth.text = this.MaxHealth.ToString();
            List<CardForm> handList = game.CardList.GetHandList(this);
            if (hand != null) hand.text = handList.Count.ToString();
            if(OnWaitingAction != null)
            {
                OnWaitingAction.Invoke();
                OnWaitingAction = null;
            }
        }
        catch { }
    }

    public virtual int damageCalculationModifer(int number, Player source, Player victim)
    {

        return number;
    }
}

