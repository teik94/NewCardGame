//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class CardController
{
    #region Variable Declaration
    public Card CardData;
    public Card.CardState State = Card.CardState.None;
    public Player Owner = null;
    public DateTime LastInteract = DateTime.Now;
    Texture2D texture;
    Vector2 position= new Vector2(0,0);
    float width = 50;
    float height = 70;
    GameObject go;    
    Button button;
    public bool Enable = true;
    public bool Visible = true;
    Vector2 newPosition = Vector2.zero;
    float MoveSpeed = 0;
    Action action;
    public Rigidbody2D RigidBody;
    public RectTransform RectTrans;
    public float Order = 0.5f;
    public int Sorting = 1;
    public Outline Border;
    public Color HighlightColor;
    private bool hasBorder = false;
    private bool active;
    public Sprite MainSprite;
    public Sprite BackSprite;
    public bool FaceUp = false;

    public delegate void UpdateDelegate();
    public UpdateDelegate FormsUpdate = null;
    public delegate void EventDelegate();
    public EventDelegate OnClick = null;
    public EventDelegate OnMouseUp = null;
    public EventDelegate OnMouseDown = null;
    public EventDelegate OnMouseEnter = null;
    public EventDelegate OnMouseLeave = null;
    public EventDelegate OnMouseMove = null;



    BoxCollider2D Collider;
    EventTrigger ev;
    #endregion

    #region Properties
    public GameObject gameObject
    {
        get { return go; }
        set { go = value; }
    }

    public bool Active
    {
        get { return active; }
        set 
        { 
            active = value;
            
        }
    }

    public bool HasBorder
    {
        get { return hasBorder; }
        set 
        { 
            hasBorder = value; 
            if(hasBorder)
            {
                Border.effectDistance = new Vector2(2, -2);
            }
            else
            {
                Border.effectDistance = new Vector2(0, 0);
            }
        }
    }

    public Button Button
    {
        get
        {
            return button;
        }
        set
        {
            button = value;
        }
    }

    public Vector2 Position
    {
        get
        {
            return position;
        }
        set
        {
            position = value;
        }
    }

    public float Width
    {
        get
        {
            return width;
        }
        set
        {
            width = value;
        }
    }

    public float Height
    {
        get
        {
            return height;
        }
        set
        {
            height = value;
        }
    } 
    #endregion

    #region Function
    public void Move(Vector2 _newPos, float _speed, Action _action)
    {
        newPosition = _newPos;
        MoveSpeed = _speed;
        action = _action;
        this.FormsUpdate = null;
        this.FormsUpdate += this.Mover;
    }

    private void Mover()
    {
        Vector2 move_speed = (newPosition - Position);
        move_speed.Normalize();
        if (float.IsNaN(move_speed.x) || float.IsNaN(move_speed.y))
        {
            move_speed = Vector2.one;
        }
        float move_time = MoveSpeed * Time.deltaTime;
        //Debug.Log("X:" + newPosition.x);
        //Debug.Log("Y:" + newPosition.y);
        //float move_time = MoveSpeed;
        Vector2 move_distance = move_speed * move_time;
        //Console.WriteLine(move_speed.ToString());
        if ((Math.Abs(Position.x - newPosition.x) <= Math.Abs(move_distance.x))
            && (Math.Abs(Position.y - newPosition.y) <= Math.Abs(move_distance.y)))
        {
            this.Position = newPosition;
            //rb.MovePosition(newPosition);

            MoveSpeed = 0f;
            this.FormsUpdate -= this.Mover;
            if (action != null)
            {
                action.Invoke();
                action = null;
            }
            return;
        }
        float newX = this.Position.x + move_distance.x;
        float newY = this.Position.y + move_distance.y;
        this.Position = new Vector2(newX, newY);
        //rb.MovePosition(new Vector2(newX, newY));
    } 

    public void UpdateLastInteract()
    {
        this.LastInteract = DateTime.Now;
        this.gameObject.transform.SetAsLastSibling();
    }
    #endregion

    #region Init & Update
    public CardController(Card _card, float x, float y, float width, float heigh)
    {
        this.CardData = _card;
		texture = Resources.Load ("Cards/" + CardData.Asset)  as Texture2D;
        Init();
		Position = new Vector2 (x, y);
		//Width = width;
        //Height = heigh;
        GameObject sample = GameObject.Find("Test Object");
        if(sample !=null) {
            RectTransform rect = sample.GetComponent<RectTransform>();
            Width = rect.GetSize().x;
            Height = rect.GetSize().y;
        }
        //Init();
    }

    public void Init()
    {
        Texture2D back = Resources.Load("Cards/Card Back") as Texture2D;
        MainSprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), new Vector2(0f, 0f));
        BackSprite = Sprite.Create(back, new Rect(0, 0, back.width, back.height), new Vector2(0f, 0f));
        GameObject mainPanel = GameObject.Find("Main Panel");
        go = new GameObject(CardData.CardID.ToString());
        this.Sorting = mainPanel.transform.childCount + 1;
        go.transform.SetParent(mainPanel.transform);
        Collider = go.AddComponent<BoxCollider2D>();
        Collider.isTrigger = true;
        Collider.size = new Vector2(Width, Height);
        RectTrans = go.AddComponent<RectTransform>();
        RectTrans.sizeDelta = new Vector2(Width, Height);
        RectTrans.anchoredPosition = new Vector2(Position.x, Position.y);

        Border = go.AddComponent<Outline>();
        HighlightColor = Color.blue;
        Border.effectColor = HighlightColor;
        Border.effectDistance = new Vector2(0, 0);
        
        cv = go.AddComponent<Image>();
        cv.sprite = BackSprite;
        FaceUp = false;
        
        RigidBody = go.AddComponent<Rigidbody2D>();
        //rb.gravityScale = 1;

        this.Active = false;

        #region Event Registration
        EventTrigger eventTrigger = go.AddComponent<EventTrigger>();

        EventTrigger.TriggerEvent trigger = new EventTrigger.TriggerEvent();

        EventTrigger.Entry entry = new EventTrigger.Entry();
        entry.eventID = EventTriggerType.PointerClick;
        trigger.AddListener((eventData) => { onMouseClick(); });
        entry.callback = trigger;

        EventTrigger.Entry entry2 = new EventTrigger.Entry();
        entry2.eventID = EventTriggerType.PointerEnter;
        entry2.callback.AddListener((eventData) => { onMouseEnter(); });

        EventTrigger.Entry entry3 = new EventTrigger.Entry();
        entry3.eventID = EventTriggerType.PointerExit;
        entry3.callback.AddListener((eventData) => { onMouseLeave(); });

        EventTrigger.Entry entry4 = new EventTrigger.Entry();
        entry4.eventID = EventTriggerType.PointerExit;
        entry4.callback.AddListener((eventData) => { onMouseMove(); });

        EventTrigger.Entry entry5 = new EventTrigger.Entry();
        entry5.eventID = EventTriggerType.PointerExit;
        entry5.callback.AddListener((eventData) => { onMouseDown(); });

        EventTrigger.Entry entry6 = new EventTrigger.Entry();
        entry6.eventID = EventTriggerType.PointerExit;
        entry6.callback.AddListener((eventData) => { onMouseUp(); });

        eventTrigger.delegates = new System.Collections.Generic.List<EventTrigger.Entry>();
        eventTrigger.delegates.Add(entry);
        eventTrigger.delegates.Add(entry2);
        eventTrigger.delegates.Add(entry3);
        eventTrigger.delegates.Add(entry4);
        eventTrigger.delegates.Add(entry5);
        eventTrigger.delegates.Add(entry6); 
        #endregion

    }
    Image cv;
    public void Update()
    {
        //RectTransform rt = go.GetComponent<RectTransform>();
        if (RectTrans != null)
        {
            RectTrans.sizeDelta = new Vector2(Width, Height);
            //rt.transform.position = new Vector3(Position.x, Position.y, Order);
            RectTrans.anchoredPosition3D = new Vector3(Position.x, Position.y, Order);
            //this.gameObject.transform.SetSiblingIndex(Sorting);
            
            //rt.anchoredPosition = new Vector2(Position.x, Position.y);
        }
        if (Collider!=null)
        {
            if (Collider.size.x != this.width || Collider.size.y != this.height)
            {
                Collider.size = new Vector2(this.width, this.height);
            }
        }
        go.SetActive(active);
        if (FaceUp) cv.sprite = MainSprite;
        else cv.sprite = BackSprite;
        //this.width++;
        //this.height++;
        if (this.FormsUpdate != null)
        {
            this.FormsUpdate.Invoke();
        }
    } 
    #endregion

    #region Handler
    private void onMouseClick()
    {
        if (this.OnClick != null)
        {
            this.OnClick.Invoke();
        }
    }
    private void onMouseEnter()
    {
        if (this.OnMouseEnter != null)
        {
            this.OnMouseEnter.Invoke();
        }
    }
    private void onMouseLeave()
    {
        if (this.OnMouseLeave != null)
        {
            this.OnMouseLeave.Invoke();
        }
    }
    private void onMouseUp()
    {
        if (this.OnMouseUp != null)
        {
            this.OnMouseUp.Invoke();
        }
        
    }
    private void onMouseDown()
    {
        if (this.OnMouseDown != null)
        {
            this.OnMouseDown.Invoke();
        }
    }
    private void onMouseMove()
    {
        if (this.OnMouseMove != null)
        {
            this.OnMouseMove.Invoke();
        }
    }

    #endregion

}


